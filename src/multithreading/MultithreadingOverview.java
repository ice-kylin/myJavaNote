package multithreading;

/*
# 多线程

## 程序

- 是为完成指定任务、用某种语言编写的一组指令的集合
- 即指一段静态的代码、静态对象

## 进程

- 是程序的一次执行过程，或是正在运行的一个程序
- 是一个动态的过程：有它自身的产生、存在和消亡的过程 —— 生命周期
- 程序是静态的，进程是动态的
- 进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域

## 线程

- 进程可以进一步细化为线程，是一个程序内部的一条执行路径
- 若一个进程同一时间并行的执行多个线程，就是支持多线程的
- 线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（pc），线程切换的开销小
- 一个进程中的多个线程共享相同的内存单元 / 内存地址空间
  - 它们从同一个堆中分配对象，可以访问相同的变量和对象
    - 这就使得线程间的通信更加简便、高效
    - 但多个线程操作共享的系统资源就可能带来安全的隐患

## 单核 CPU 和多核 CPU

- 单核 CPU
  - 假的多线程
- 多核 CPU
  - 可以更好地发挥多线程的效率
- 一个 Java 应用程序至少有三个线程
  1. `main()` 主线程
  2. `gc()` 垃圾回收线程
  3. 异常处理进程

## 并行与并发

- 并行：多个 CPU 同时执行多个任务
- 并发：一个 CPU 同时执行多个任务

## 使用多线程的优点

- 提高应用程序的响应
- 提高 CPU 的利用率
- 改善程序结构
  - 将既长又复杂的进程分为多个线程，独立运行，有利于理解和修改

## 何时需要多线程

- 程序需要同时执行两个或多个线程
- 程序需要实现一些需要等待的任务，如用户输入、文件读写、网络操作、搜索等
- 需要一些后台运行的程序时

## Java 中线程的分类

- 守护线程
- 用户线程
 */
public class MultithreadingOverview {
    public static void main(String[] args) {

    }
}
