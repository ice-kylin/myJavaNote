package objectoriented.polymorphism;

/*
# 面向对象特征之三：多态性

- 理解多态性：可以理解为一个事物的多种形态
- 对象的多态性：父类的对象指向子类的对象（或子类的对象赋给父类引用）
- 多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法 —— 虚拟方法调用
  - 有了对象的多态性以后，在编译期只能调用父类中声明的方法，但在运行期，实际执行的是子类重写父类的方法
  - 总结：编译看左、运行看右
- 多态性的使用前提
  1. 类的继承关系
  2. 要有方法的重写
- 对象的多态性只适用于方法，不适用于属性
- 有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的
- 但是由于变量声明为父类类型，导致编译时只能调用父类中声明的属性和方法，子类中特有的属性和方法不能调用
- 可以使用强制类型转换符（向下转型）
  - 使用强转时可能出现 `ClassCastException` 的异常

## `instanceof` 关键字

- `a instanceof A`：判断对象 a 是否是类 A 的实例
  - 如果是，返回 `true`
  - 如果不是，返回 `false`
- 为了避免在向下转型时出现 `ClassCastException` 的异常，在向下转型之前先进行 `instanceof` 的判断
  - 一旦返回 `true`，就进行向下转型
  - 如果返回 `false`，不进行向下转型
 */
public class PolymorphismTest {
    public static void main(String[] args) {

    }
}
